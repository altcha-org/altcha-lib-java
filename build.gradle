plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.13.1'
}

group = 'org.altcha'
archivesBaseName = 'altcha'
version = '1.2.0'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation 'org.json:json:20240303'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.altcha'
            artifactId = 'altcha'

            from components.java

            pom {
                name = 'org.altcha.altcha'
                description = 'A library for creating and verifying ALTCHA challenges.'
                url = 'https://github.com/altcha-org/altcha-lib-java'
                inceptionYear = '2024'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'daniel'
                        name = 'Daniel Regeci'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/altcha-org/altcha-lib-java.git'
                    developerConnection = 'scm:git:ssh://github.com/altcha-org/altcha-lib-java.git'
                    url = 'http://github.com/altcha-org/altcha-lib-java'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    release {
        github {
            token = System.getenv('GITHUB_TOKEN')
        }
    }

    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
        publicKey = System.getenv('SIGNING_PUBLIC_KEY')
        secretKey = System.getenv('SIGNING_SECRET_KEY')
        passphrase = System.getenv('SIGNING_PASSPHRASE')
    }

    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    username = System.getenv('OSSRH_USERNAME')
                    password = System.getenv('OSSRH_PASSWORD')
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}